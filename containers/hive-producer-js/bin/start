#!/usr/bin/env node
const CONFIG = require('../conf')
const CPU_COUNT = (CONFIG.CLUSTER_SIZE && Number.parseInt(CONFIG.CLUSTER_SIZE)) || require('os').cpus().length
const isHTTP2 = CONFIG.HTTP_VERSION === 2

const cluster = require('cluster')
const fs = require('fs')
const http = isHTTP2
  ? require('http2')
  : CONFIG.SECURE
    ? require('https')
    : require('http')

const { default: main } = require('../dist')

const options = CONFIG.SECURE ? {
  key: fs.readFileSync('./cert/ssl-key.pem'),
  cert: fs.readFileSync('./cert/ssl-cert.pem')
} : {}

if (cluster.isMaster && CPU_COUNT > 1) {
  console.log(`Master ${process.pid} is running`)

  for (let i = 0; i < CPU_COUNT; i++) {
    cluster.fork()
  }

  let exitedWorkers = 0
  cluster.on('exit', (worker, code, signal) => {
    console.log(`Worker ${worker.process.pid} died`)

    exitedWorkers++
    if (exitedWorkers === CPU_COUNT - 1) process.exit()
  })
} else {
  main()
    .then(route => {
      if (CONFIG.SECURE) {
        isHTTP2
          ? http.createSecureServer(options, route).listen(CONFIG.PORT)
          : http.createServer(options, route).listen(CONFIG.PORT)
      } else {
        http.createServer(options, route).listen(CONFIG.PORT)
      }

      console.info('app running on port', CONFIG.PORT)
      if (CPU_COUNT > 1) console.log(`Worker ${process.pid} started`)
    })
    .catch(error => console.error(error))
}
