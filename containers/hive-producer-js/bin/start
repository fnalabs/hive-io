#!/usr/bin/env node

// imports
const cluster = require('cluster')
const fs = require('fs')

const fastify = require('fastify')

const { default: main } = require('../dist')
const {
  CLUSTER_SIZE,
  HTTP_VERSION,
  NODE_ENV,
  PORT,
  SECURE,
  SSL_CERT_PATH,
  SSL_KEY_PATH
} = require('../dist/config')

// constants
const CPU_COUNT = (CLUSTER_SIZE && Number.parseInt(CLUSTER_SIZE)) || require('os').cpus().length

const isHTTP2 = HTTP_VERSION === 2
const isDev = NODE_ENV === 'development'

const options = SECURE ? {
  http2: isHTTP2,
  https: {
    allowHTTP1: true,
    cert: fs.readFileSync(SSL_CERT_PATH),
    key: fs.readFileSync(SSL_KEY_PATH)
  },
  logger: isDev
} : {
  http2: isHTTP2,
  logger: isDev
}

// start script
if (cluster.isMaster && CPU_COUNT > 1) {
  console.log(`Master ${process.pid} is running`)

  for (let i = 0; i < CPU_COUNT; i++) {
    cluster.fork()
  }

  let exitedWorkers = 0
  cluster.on('exit', (worker, code, signal) => {
    console.log(`Worker ${worker.process.pid} died`)

    exitedWorkers++
    if (exitedWorkers === CPU_COUNT - 1) process.exit()
  })
} else {
  main(fastify(options))
    .then(service => {
      service.listen(PORT, '0.0.0.0', () => {
        console.info('app running on port', PORT)
      })
    })
    .catch(error => console.error(error))
}
